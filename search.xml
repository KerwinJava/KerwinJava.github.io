<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>es就这么跑起来了</title>
      <link href="/2023/12/11/es%E5%B0%B1%E8%BF%99%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/"/>
      <url>/2023/12/11/es%E5%B0%B1%E8%BF%99%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在之前，领导安排了一个搭建文件管理系统的任务给同事，以支持全文检索功能，主要用于管理项目交付相关的文档。然而，由于时间紧迫，同事无法同时处理这项任务。另外，我之前负责带头设计、开发和改造公司几个产品，将它们从 Spring Boot 项目迁移到微服务架构。在这个过程中，一直存在着日志监控的问题。因此，对 ELK 解决方案产生了浓厚的兴趣。因此，我主动接下了这个任务，接下来先研究一下这个开源组件吧。</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>因为之前一直在使用 Docker 进行项目的安装和部署，对于定制化程度不高的软件来说，在网上找到镜像就可以轻松地运行起来，这非常方便。考虑到现阶段主要关注的是如何快速启动，而不是深入研究各个细节，我秉持着“怎么方便怎么来”的原则，先行动起来。</p><h5 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html">简介</a></h6><ol><li><p>是一个分布式、免费和开放的搜索和分析引擎</p><blockquote><p>Elasticsearch is the distributed search and analytics engine at the heart of the Elastic Stack. </p></blockquote></li><li><p>适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。</p><blockquote><p>Whether you have structured or unstructured text, numerical data, or geospatial data, Elasticsearch can efficiently store and index it in a way that supports fast searches.</p></blockquote></li><li><p>使用java编写，基于Apache Lucene的搜索引擎</p></li></ol><h6 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h6><p>​拉取镜像</p><blockquote><p>docker pull elasticsearch:7.9.0</p></blockquote><p>​启动</p><blockquote><p>docker run -d –name es -p 9200:9200 -p 9300:9300 elasticsearch:7.9.0</p><p>9200是对外提供的http服务端口</p><p>9300是集群内部节点间通讯端口</p></blockquote><p>​修改配置</p><pre class="line-numbers language-none"><code class="language-none">cluster.name: &quot;docker-cluster&quot;network.host: 0.0.0.0#以下为新增配置 主要是跨域访问的配置和集群配置 http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;# minimum_master_nodes need to be explicitly set when bound on a public IP# set to 1 to allow single node clusters# Details: https:&#x2F;&#x2F;github.com&#x2F;elastic&#x2F;elasticsearch&#x2F;pull&#x2F;17288#因为需要使用elastic-head,所以开启集群配置discovery.zen.minimum_master_nodes: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​验证</p><blockquote><p>修改完配置后重启es容器，稍等片刻，使用浏览器访问安装机器的9200端口，出现es相关信息就说明启动成功了</p></blockquote><p><img src="/2023/12/11/es%E5%B0%B1%E8%BF%99%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/es-ok.png" alt="es-ok"></p><h5 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch-head"></a>elasticsearch-head</h5><h6 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h6><p>Elasticsearch Head 是一个用于 Elasticsearch 集群管理和监控的 Web 界面插件。它提供了一个直观的用户界面，可以帮助用户轻松地监视集群的健康状况、索引的状态、节点的信息等。通过 Elasticsearch Head，用户可以方便地查看和管理集群中的数据、索引和节点，并进行一些基本的管理操作。这个插件通常以浏览器插件的形式存在，可以直接在浏览器中使用，而无需额外的安装步骤。</p><p>Elasticsearch Head 的直观界面和丰富功能使得用户可以更加方便地监控和管理其 Elasticsearch 集群，有助于提高集群的稳定性和性能。</p><h6 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h6><p>作为插件主要有浏览器插件、es插件、单独进程这三种方式运行，如果以单独进程安装，那么应该还是可以以docker的方式进行。</p><p>​拉取镜像</p><blockquote><p>docker pull mobz&#x2F;elasticsearch-head:5</p></blockquote><p>​启动</p><blockquote><p>docker run -d –name es_admin -p 9100:9100 mobz&#x2F;elasticsearch-head:5</p></blockquote><p>​验证</p><blockquote><p>使用浏览器访问9100端口，可以看到如下界面，即安装成功</p></blockquote><p><img src="/2023/12/11/es%E5%B0%B1%E8%BF%99%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/head-ok.png" alt="head-ok"></p><p><strong>如果出现文档内容不显示，http请求报错，修改配置文件解决</strong></p><blockquote><p>进入head插件安装目录 ，编辑&#x2F;usr&#x2F;src&#x2F;app&#x2F;_site&#x2F;vendor.js;修改共有两处</p><p>第6886行 : contentType: “application&#x2F;x-www-form-urlencoded改为 contentType: “application&#x2F;json;charset&#x3D;UTF-8”</p><p>第7573行: var inspectData &#x3D; s.contentType &#x3D;&#x3D;&#x3D; “application&#x2F;x-www-form-urlencoded” &amp;&amp;改为 var inspectData &#x3D; s.contentType &#x3D;&#x3D;&#x3D; “application&#x2F;json;charset&#x3D;UTF-8</p></blockquote><h5 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h5><h6 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h6><p>Kibana 是一个开源的数据可视化工具，通常与 Elasticsearch 一起使用，用于分析、搜索和交互式地浏览存储在 Elasticsearch 中的数据。Kibana 提供了丰富的图表、表格、地图等可视化组件，用户可以利用这些组件来创建仪表盘、报表和实时数据监控界面。除了数据可视化外，Kibana 还提供了强大的搜索功能和数据分析工具，帮助用户更好地理解和利用其数据。</p><p>通过 Kibana，用户可以轻松地构建各种数据可视化界面，从而更直观地理解数据、发现数据中的模式和趋势，并进行实时的数据监控和分析。Kibana 的灵活性和丰富的功能使其成为了许多企业和组织在数据分析和可视化方面的首选工具。</p><h6 id="安装步骤-2"><a href="#安装步骤-2" class="headerlink" title="安装步骤"></a>安装步骤</h6><p>拉取镜像</p><blockquote><p>docker pull kibana:7.9.0</p></blockquote><p>启动</p><blockquote><p>docker run –name kibana -e ELASTICSEARCH_HOSTS&#x3D;<a href="http://10.194.17.40:9200/">http://10.194.17.40:9200</a> -p 5601:5601 -d kibana:7.9.0</p><p>5601是页面访问端口</p></blockquote><p>验证</p><blockquote><p>使用浏览器访问5601端口</p></blockquote><p><img src="/2023/12/11/es%E5%B0%B1%E8%BF%99%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/kibana-ok.png" alt="kibana-ok"></p>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es </tag>
            
            <tag> 开源软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应该是Spring最重要的方法了</title>
      <link href="/2023/12/09/%E5%BA%94%E8%AF%A5%E6%98%AFspring%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95%E4%BA%86/"/>
      <url>/2023/12/09/%E5%BA%94%E8%AF%A5%E6%98%AFspring%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇我们了解了springboot启动的基本流程，但是留下了一些疑问，其中有个重要的方法refresh()今天我们重点针对性的分析一下，让我们先看一下refresh的定义，从注释可以看出这里一直在强调<strong>单例对象的创建</strong>，那我们上一篇文章留下的问题看来今天可以得到答案了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Load or refresh the persistent representation of the configuration, which * might be from Java-based configuration, an XML file, a properties file, a * relational database schema, or some other format. * * 从java配置类、xml文件、properties配置文件、数据库或者其他格式中加载或刷新配置的持久化 * * &lt;p>As this is a startup method, it should destroy already created singletons * if it fails, to avoid dangling resources. In other words, after invocation * of this method, either all or no singletons at all should be instantiated. * * 这个方法在启动的时候调用，所以如果失败了需要销毁已经创建的单例对象， * * @throws BeansException if the bean factory could not be initialized * @throws IllegalStateException if already initialized and multiple refresh * attempts are not supported */</span><span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/12/09/%E5%BA%94%E8%AF%A5%E6%98%AFspring%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95%E4%BA%86/001.png" alt="方法实现"></p><p>结合UML类图看一下内部关系</p><p><img src="/2023/12/09/%E5%BA%94%E8%AF%A5%E6%98%AFspring%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95%E4%BA%86/uml-class.png" alt="uml类图"></p><p>让我们把重心放到AbstractApplicationContext这个类的实现上来，除了ComplexWebApplicationContext和SimpleWebApplicationContext外，所有其他web容器都会调用这里的refresh方法来完成容器的初始化。</p><pre class="line-numbers language-none"><code class="language-none">public void refresh() throws BeansException, IllegalStateException &#123;    synchronized (this.startupShutdownMonitor) &#123;       &#x2F;&#x2F; Prepare this context for refreshing.       &#x2F;&#x2F;在springboot中 比如是servlet容器,实际上先调用该类的子类AnnotationConfigServletWebApplicationContext.prepareRefresh方法       &#x2F;&#x2F;这里面多做了一步ClassPathBeanDefinitionScanner.clearCache,先清空Map&lt;Resource, MetadataReader&gt; metadataReaderCache里的资源元数据，然后再调用这里的prepareRefresh       prepareRefresh();       &#x2F;&#x2F; Tell the subclass to refresh the internal bean factory.       &#x2F;&#x2F;ConfigurableListableBeanFactory类实现对工厂的配置以及对bean属性的自动装配       &#x2F;&#x2F;获取刷新后的工厂类       ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();       &#x2F;&#x2F; Prepare the bean factory for use in this context.       prepareBeanFactory(beanFactory);       try &#123;          &#x2F;&#x2F; Allows post-processing of the bean factory in context subclasses.          &#x2F;&#x2F;添加BeanPostProcessor-ServletContextAwareProcessor @see GenericWebApplicationContext#postProcessBeanFactory          &#x2F;&#x2F;添加BeanPostProcessor-WebApplicationContextServletContextAwareProcessor @see ServletWebServerApplicationContext#postProcessBeanFactory          &#x2F;&#x2F;注册scope到容器 @see RequestScope  SessionScope          postProcessBeanFactory(beanFactory);          &#x2F;&#x2F; Invoke factory processors registered as beans in the context.          &#x2F;&#x2F;BeanFactoryPostProcessor接口是Spring初始化BeanFactory时对外暴露的扩展点，BeanFactoryPostProcessor可以在容器实例化任何bean之前读取或修改bean的定义          &#x2F;&#x2F;todo 方法较长 放到下一篇介绍          &#x2F;&#x2F; 本着循序渐进 由浅到深的原则 先跳过这个方法 @see PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors          &#x2F;&#x2F; PostProcessorRegistrationDelegate是AbstractApplicationContext委托执行post processors任务的工具类          invokeBeanFactoryPostProcessors(beanFactory);          &#x2F;&#x2F; Register bean processors that intercept bean creation.          &#x2F;&#x2F;BeanPostProcessor和BeanFactoryPostProcessor是有区别的 别搞混了，这个是对bean实例的扩展点，上面是bean定义的扩展点，作用于bean生命周期的不同时机          &#x2F;&#x2F;注册BeanPostProcessor到beanFactory          registerBeanPostProcessors(beanFactory);          &#x2F;&#x2F; Initialize message source for this context.          &#x2F;&#x2F;初始化国际化资源，如果没有则注册一个DelegatingMessageSource到容器中，并作为属性messageSource的值          initMessageSource();          &#x2F;&#x2F; Initialize event multicaster for this context.          &#x2F;&#x2F;初始化ApplicationEventMulticaster，如果没有则注册一个SimpleApplicationEventMulticaster实例到容器中，并作为属性applicationEventMulticaster的值          initApplicationEventMulticaster();          &#x2F;&#x2F; Initialize other special beans in specific context subclasses.          &#x2F;&#x2F;默认是个空方法，所以是为了提高扩展性设计的，留了个口子供子类实现          &#x2F;&#x2F;比如@see GenericWebApplicationContext#onRefresh 初始化了web项目的UI主题 前后端分离基本可以不用关心这个了          &#x2F;&#x2F;比如@see ServletWebServerApplicationContext#onRefresh 在这里创建了一个web服务器          onRefresh();          &#x2F;&#x2F; Check for listener beans and register them.          &#x2F;&#x2F;获取所有ApplicationListener，注册所有的事件监听器          registerListeners();          &#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.          &#x2F;&#x2F;准备动手，前戏已完成，现在开始实例化对象          finishBeanFactoryInitialization(beanFactory);          &#x2F;&#x2F; Last step: publish corresponding event.          finishRefresh();       &#125;       catch (BeansException ex) &#123;          if (logger.isWarnEnabled()) &#123;             logger.warn(&quot;Exception encountered during context initialization - &quot; +                   &quot;cancelling refresh attempt: &quot; + ex);          &#125;          &#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.          destroyBeans();          &#x2F;&#x2F; Reset &#39;active&#39; flag.          cancelRefresh(ex);          &#x2F;&#x2F; Propagate exception to caller.          throw ex;       &#125;       finally &#123;          &#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we          &#x2F;&#x2F; might not ever need metadata for singleton beans anymore...          resetCommonCaches();       &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="1-为上下文刷新做准备"><a href="#1-为上下文刷新做准备" class="headerlink" title="1.为上下文刷新做准备"></a>1.为上下文刷新做准备</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * AbstractApplicationContext#prepareRefresh * * Prepare this context for refreshing, setting its startup date and * active flag as well as performing any initialization of property sources. */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Switch to active.</span>    <span class="token comment">//初始化标志位及启动时间</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//看这些源码经常能看到这些日志打印的判断，减少在生产环境的资源消耗，同理会增加debug环境的资源消耗</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Initialize any placeholder property sources in the context environment.</span>    <span class="token comment">//将enviroment.getPropertySources里的初始化资源&#123;@see StandardEnvironment#customizePropertySources(MutablePropertySources) &#125; StubPropertySource替换为实际的资源</span>    <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Validate that all properties marked as required are resolvable:校验参数-不能为null</span>    <span class="token comment">// see ConfigurablePropertyResolver#setRequiredProperties</span>    <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-获取单例对象工厂类"><a href="#2-获取单例对象工厂类" class="headerlink" title="2.获取单例对象工厂类"></a>2.获取单例对象工厂类</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * AbstractApplicationContext#obtainFreshBeanFactory  * Tell the subclass to refresh the internal bean factory. * @return the fresh BeanFactory instance * @see #refreshBeanFactory() * @see #getBeanFactory() *&#x2F;protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;    &#x2F;&#x2F;抽象方法，子类去实现@see GenericApplicationContext#refreshBeanFactory()    refreshBeanFactory();    &#x2F;&#x2F;获取工厂类实例 @see GenericApplicationContext#GenericApplicationContext()    &#x2F;&#x2F;默认实现返回的是@see DefaultListableBeanFactory    return getBeanFactory();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * GenericApplicationContext#refreshBeanFactory * * Do nothing: We hold a single internal BeanFactory and rely on callers * to register beans through our public methods (or the BeanFactory&#39;s). * @see #registerBeanDefinition *&#x2F;@Overrideprotected final void refreshBeanFactory() throws IllegalStateException &#123;    &#x2F;&#x2F;先获取锁，只允许执行一次，然后初始化id    if (!this.refreshed.compareAndSet(false, true)) &#123;       throw new IllegalStateException(             &quot;GenericApplicationContext does not support multiple refresh attempts: just call &#39;refresh&#39; once&quot;);    &#125;    this.beanFactory.setSerializationId(getId());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-BeanFactory的初始化"><a href="#3-BeanFactory的初始化" class="headerlink" title="3.BeanFactory的初始化"></a>3.BeanFactory的初始化</h4><p>这个方法粗略一看其实没什么内容，主要是做了一些属性的初始化，可以简单看一下里面的几个重要的属性，看起来都是在为bean的注入做准备</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * Configure the factory&#39;s standard context characteristics, * such as the context&#39;s ClassLoader and post-processors. * @param beanFactory the BeanFactory to configure *&#x2F;protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;&#x2F;&#x2F; Tell the internal bean factory to use the context&#39;s class loader etc.&#x2F;&#x2F;设置bean的类加载器&#x2F;&#x2F; 默认 ClassUtils.getDefaultClassLoader()beanFactory.setBeanClassLoader(getClassLoader());&#x2F;&#x2F;设置默认表达式解析器beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));&#x2F;&#x2F;注册默认PropertyEditor，用于依赖注入时对参数的解析转换beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));&#x2F;&#x2F; Configure the bean factory with context callbacks.beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));&#x2F;&#x2F;ConfigurableListableBeanFactory#ignoreDependencyInterface&#x2F;&#x2F;设置忽略自动装配的接口beanFactory.ignoreDependencyInterface(EnvironmentAware.class);beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);beanFactory.ignoreDependencyInterface(MessageSourceAware.class);beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);&#x2F;&#x2F; BeanFactory interface not registered as resolvable type in a plain factory.&#x2F;&#x2F; MessageSource registered (and found for autowiring) as a bean.&#x2F;&#x2F;@see ConfigurableListableBeanFactory#registerResolvableDependency&#x2F;&#x2F;注册可以自动解析注入的类，当一个接口有多个实现类时，可以通过这个方法明确注入哪个类beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);beanFactory.registerResolvableDependency(ResourceLoader.class, this);beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);beanFactory.registerResolvableDependency(ApplicationContext.class, this);&#x2F;&#x2F; Register early post-processor for detecting inner beans as ApplicationListeners.&#x2F;&#x2F;设置BeanPostProcessor-ApplicationListenerDetectorbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));&#x2F;&#x2F; Detect a LoadTimeWeaver and prepare for weaving, if found.if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));&#x2F;&#x2F; Set a temporary ClassLoader for type matching.beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));&#125;&#x2F;&#x2F; Register default environment beans.&#x2F;&#x2F;注册一些基本的beanif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());&#125;if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());&#125;if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-注册子类自定义的BeanPostProcess"><a href="#4-注册子类自定义的BeanPostProcess" class="headerlink" title="4.注册子类自定义的BeanPostProcess"></a>4.注册子类自定义的BeanPostProcess</h4><h4 id="5-实例化并调用所有已注册的BeanFactoryPostProcessor-bean"><a href="#5-实例化并调用所有已注册的BeanFactoryPostProcessor-bean" class="headerlink" title="5.实例化并调用所有已注册的BeanFactoryPostProcessor bean"></a>5.实例化并调用所有已注册的BeanFactoryPostProcessor bean</h4><h4 id="6-注册BeanPostProcessor到beanFactory"><a href="#6-注册BeanPostProcessor到beanFactory" class="headerlink" title="6.注册BeanPostProcessor到beanFactory"></a>6.注册BeanPostProcessor到beanFactory</h4><h4 id="7-初始化国际化资源"><a href="#7-初始化国际化资源" class="headerlink" title="7.初始化国际化资源"></a>7.初始化国际化资源</h4><h4 id="8-初始化ApplicationEventMulticaster"><a href="#8-初始化ApplicationEventMulticaster" class="headerlink" title="8.初始化ApplicationEventMulticaster"></a>8.初始化ApplicationEventMulticaster</h4><h4 id="9-调用onRefresh"><a href="#9-调用onRefresh" class="headerlink" title="9.调用onRefresh()"></a>9.调用onRefresh()</h4><p>AbstractApplicationContext里只是一个空方法，留了个口子供子类进行扩展，比如这是ServletWebServerApplicationContext的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *ServletWebServerApplicationContext#onRefresh * */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//字面意思 创建web服务器</span>       <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Unable to start web server"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 创建服务器 并更新配置资源 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">WebServer</span> webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//根据定义的工厂类生成web服务器，后面贴了一段工厂类配置示例</span>            <span class="token comment">//todo tomcat容器怎么启动、运行、销毁的 后面再分析 先欠着</span><span class="token class-name">ServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"webServerGracefulShutdown"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">WebServerGracefulShutdownLifecycle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"webServerStartStop"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">WebServerStartStopLifecycle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * *配置示例 */</span><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurableServletWebServerFactory</span> <span class="token function">webServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SecurityConstraint</span> securityConstraint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                securityConstraint<span class="token punctuation">.</span><span class="token function">setUserConstraint</span><span class="token punctuation">(</span><span class="token string">"CONFIDENTIAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SecurityCollection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"TRACE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"SEARCH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">"PROPFIND"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                securityConstraint<span class="token punctuation">.</span><span class="token function">addCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addConstraint</span><span class="token punctuation">(</span>securityConstraint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">addConnectorCustomizers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TomcatConnectorCustomizer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            connector<span class="token punctuation">.</span><span class="token function">setAllowTrace</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"relaxedQueryChars"</span><span class="token punctuation">,</span> <span class="token string">"|&#123;&#125;[]\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tomcat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-注册时间监听器"><a href="#10-注册时间监听器" class="headerlink" title="10.注册时间监听器"></a>10.注册时间监听器</h4><h4 id="11-开始初始化bean"><a href="#11-开始初始化bean" class="headerlink" title="11.开始初始化bean"></a>11.开始初始化bean</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * Finish the initialization of this context&#39;s bean factory, * initializing all remaining singleton beans. *&#x2F;protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;    ......    &#x2F;&#x2F; Allow for caching all bean definition metadata, not expecting further changes.    &#x2F;&#x2F;即将进行初始化实例，加上标志 不允许修改bean定义    beanFactory.freezeConfiguration();    &#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.    &#x2F;&#x2F;todo 这个也值得单独深入研究一下    beanFactory.preInstantiateSingletons();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-完成contextRefresh"><a href="#12-完成contextRefresh" class="headerlink" title="12.完成contextRefresh"></a>12.完成contextRefresh</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * Finish the refresh of this context, invoking the LifecycleProcessor&#39;s * onRefresh() method and publishing the * &#123;@link org.springframework.context.event.ContextRefreshedEvent&#125;. *&#x2F;protected void finishRefresh() &#123;    &#x2F;&#x2F; Clear context-level resource caches (such as ASM metadata from scanning).    &#x2F;&#x2F;清楚resource缓存    clearResourceCaches();    &#x2F;&#x2F; Initialize lifecycle processor for this context.    &#x2F;&#x2F;从容器中获取lifecycleProcessor到上下文    initLifecycleProcessor();    &#x2F;&#x2F; Propagate refresh to lifecycle processor first.    getLifecycleProcessor().onRefresh();    &#x2F;&#x2F; Publish the final event.    &#x2F;&#x2F;发布容器刷新完成事件    publishEvent(new ContextRefreshedEvent(this));    &#x2F;&#x2F; Participate in LiveBeansView MBean, if active.    LiveBeansView.registerApplicationContext(this);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>到这里上下文刷新完成了，但是还要处理一下异常，如果创建bean失败了怎么办</p><blockquote><p>​销毁所有已经创建好的bean</p><p>​修改标志位（prepareRefresh里设置的）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> springboot </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原来springboot启动这么简单</title>
      <link href="/2023/12/05/%E5%8E%9F%E6%9D%A5springboot%E5%90%AF%E5%8A%A8%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/"/>
      <url>/2023/12/05/%E5%8E%9F%E6%9D%A5springboot%E5%90%AF%E5%8A%A8%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h3 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h3><p>纵观江湖，搭建一座Spring Boot项目，实为易如反掌，大可有二法:<br>首法，在  <a href="https://start.spring.io/">spring</a> 之乡，或 <a href="https://start.aliyun.com/">阿里</a>巨头之邦，得获其提供之脚手架工具，登高一呼，则代码自动落肆。可犹阔以在网页上操作，简揽诸多选项，而后手握IDE，便可快捷地揭开项目的序幕。次法，则为手搭之方，倚重于Maven、Gradle，或Ant等构筑工巧。我在此略列其要领（惟就Maven而言）：初辟工程，谓之立项目；嵌入Spring Boot依赖，诸如spring-boot-starter-parent父项，及spring-boot-starter-web等，需一一批注于pom.xml中。主启动类亦异曲同工，以@SpringBootApplication为尊，义不容辞；从而顺着股肱血脉，引领开发之路:</p><ol><li>创建一个新的Maven项目：在你的IDE中，选择创建一个新的Maven项目。确保你已经安装了Maven，并配置好了相关环境变量。 </li><li>添加Spring Boot依赖：在项目的pom.xml文件中，添加Spring Boot的依赖。</li></ol><p> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.3</span><span class="token number">.2</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者  </p><pre class="line-numbers language-none"><code class="language-none">&lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;        &lt;version&gt;2.3.2.RELEASE&lt;&#x2F;version&gt;    &lt;&#x2F;parent&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 或者  </p><pre class="line-numbers language-none"><code class="language-none">&lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;        &lt;version&gt;2.3.2.RELEASE&lt;&#x2F;version&gt;    &lt;&#x2F;parent&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 纵观这三种写法，实质上是相同的。spring-boot-dependencies和spring-boot-starter-parent本身并不提供任何依赖关系。spring-boot-dependencies通过定义dependencyManagement节点来管理相关的依赖项，从而使子项目能够忽略这些依赖项的版本号。spring-boot-starter-parent则是一种特殊的启动器，它在spring-boot-dependencies的基础上添加了一些Maven的默认配置和插件版本管理。 而在dependencies中增加了spring-boot-starter-web依赖项，它会自动引入Web项目所需的一些基本依赖，从而让我们可以开始开发自己的业务了。  </p><p>3.编写主启动类：在项目中创建一个主启动类，作为springboot应用的入口点。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顷刻便可启动整个项目，到浏览器中博览一番，再将业务逻辑铸成，便可依托巨室，傲视群雄，谱写自己的传奇。<br>若是仍有不解之谜，惟有再次请教也。</p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><p>整个应用通过这行代码启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正好最近因为工作需要搭建了源码环境，让我们直接跟进源码（以下截取代码都来自官方源码2.3.x分支）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> primarySources<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里就做了两件事 先new一个SpringApplication实例，然后再启动。<br>继续：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Create a new &#123;@link SpringApplication&#125; instance. The application context will load * beans from the specified primary sources (see &#123;@link SpringApplication class-level&#125; * documentation for details. The instance can be customized before calling * &#123;@link #run(String...)&#125;. * @param resourceLoader the resource loader to use * @param primarySources the primary bean sources * @see #run(Class, String[]) * @see #setSources(Set) */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这个和bean的加载有关 暂且不表</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 主资源类，会优先加载&#123;@link #getAllSources() 使用LinkedHashSet保证顺序&#125; */</span><span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据classpath类文件判断当前是否是web应用 以及具体是哪种web环境（servlet和reactive）</span>        <span class="token comment">//比如上面Example就是servlet类型，像微服务的springcloud gateway就是基于reactive实现的</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取环境中的所有ApplicationContextInitializer和ApplicationListener</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 通过获取当前调用栈，找到入口方法main所在的类，使用的是&#123;@link RuntimeException#getStackTrace()&#125; * 学到了！ */</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据代码和注释可以了解到，这个构造方法主要是做了一些初始化工作，初始化了对象的成员变量resourceLoader，primarySources，wevApplicationType,mainApplicationClass,initializers，listeners.主要看一下initializers，listeners这两个变量的构造流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Use names and ensure unique to protect against duplicates</span><span class="token comment">//获取spring factories的名称集合，然后根据名字和类型通过构造方法构造出实例，最终按@Order注解标注的顺序排序后返回</span><span class="token comment">//可以去源码的META-INF/spring.factories资源文件中看一下这些类的定义</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token function">createSpringFactoriesInstances</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> args<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> instances<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出先通过SpringFactoriesLoader.loadFactoryNames方法获取spring factories的名称集合，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">,</span> <span class="token class-name">MultiValueMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentReferenceHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> urls <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UrlResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> factoryTypeName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> factoryImplementationName <span class="token operator">:</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> factoryImplementationName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location ["</span> <span class="token operator">+</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后根据名字和类型通过构造方法构造出实例，最终按@Order注解标注的顺序排序后返回。<br>下面来到今天的重点run方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Run the Spring application, creating and refreshing a new * &#123;@link ApplicationContext&#125;. * * @param args the application arguments (usually passed from a Java main method) * @return a running &#123;@link ApplicationContext&#125; */</span><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.创建计时器 开始计时</span><span class="token comment">// spring里的计时器工具，用于测量代码块的执行时间，支持重复使用，但是注意该对象不是设计为线程安全的</span><span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//这段代码的作用是确保在运行应用程序时，"java.awt.headless"属性被正确地配置。</span><span class="token comment">// 这个属性通常用于指示Java应用程序是否运行在无图形用户界面（GUI）的环境中。</span><span class="token comment">// 通过配置这个属性，可以在不同的环境中正确地设置Java应用程序的图形处理方式，以确保应用程序能够在不同的环境中正确地运行。</span><span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * *初始化所有SpringApplicationRunListener的实现,目前只看到&#123;@link EventPublishingRunListener#starting()&#125; *后面会根据时机依次调用started、environmentPrepared、contextPrepared、running方法 */</span><span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化启动参数</span><span class="token comment">/** * 可以看一下&#123;@link org.springframework.core.env.SimpleCommandLineArgsParser&#125;类里解析参数的逻辑 * 分为optionArgs和nonOptionArgs */</span><span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//准备环境</span><span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置spring.beaninfo.ignore配置，没有则设为True</span><span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据bannerMode属性判断是否打印banner</span><span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 根据web类型创建并获取上下文对象 * servlet-&#123;@link org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext&#125; * reactive-&#123;@link org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext&#125; */</span>context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** 初始化器SpringApplication中的initializers&#123;@link ApplicationContextInitializer&#125;逐一初始化 初始化所有SpringApplicationRunListener的实现,目前只看到&#123;@link EventPublishingRunListener#contextPrepared(ConfigurableApplicationContext)&#125; ()&#125; 将applicationArguments和printedBanner以及前面提到primarySource注册为单例实例到容器中 */</span><span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册关闭钩子函数到JVM支持程序的优雅关闭</span><span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按顺序逐一调用所有ApplicationRunner.run方法和CommandLineRunner.run方法</span><span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.创建计时器<br>2.设置headless模式<br>3.加载SpringApplicationRunListener实现并依次执行starting方法<br>在启动的过程中，会根据时机依次调用started、environmentPrepared、contextPrepared、running方法<br>4.解析命令行参数<br><img src="/2023/12/05/%E5%8E%9F%E6%9D%A5springboot%E5%90%AF%E5%8A%A8%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/001.png" alt="参数配置"><br><img src="/2023/12/05/%E5%8E%9F%E6%9D%A5springboot%E5%90%AF%E5%8A%A8%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/002.png"><br>5.准备环境</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span><span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Create and configure the environment</span><span class="token comment">//根据webApplicationType类型创建对应运行环境</span><span class="token comment">//servlet-StandardServletEnvironment,reactive-StandardReactiveWebEnvironment,其他-StandardEnvironment</span><span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 配置环境 * 1. 根据配置需要，为环境初始化 &#123;@link ConversionService&#125;主要作用是提供一种统一的方式来进行类型转换，无论是基本数据类型之间的转换，还是复杂对象之间的转换，都可以通过ConversionService来实现。它可以用于将一个类型的值转换为另一个类型，比如将字符串转换为整数、将日期转换为字符串等。 * 2. 将命令行参数作为&#123;@link PropertySource&#125;加到propertySources列表中去 * 3. 读取spring.profiles.active配置，加到activeProfiles属性 * 4. 将 */</span><span class="token function">configureEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * * 当环境准备好后全量执行&#123;@link SpringApplicationRunListener#environmentPrepared(ConfigurableEnvironment)&#125; */</span>listeners<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bindToSpringApplication</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isCustomEnvironment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentConverter</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertEnvironmentIfNecessary</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span><span class="token function">deduceEnvironmentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> environment<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.准备上下文</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Run the Spring application, creating and refreshing a new * &#123;@link ApplicationContext&#125;. * * @param args the application arguments (usually passed from a Java main method) * @return a running &#123;@link ApplicationContext&#125; */</span><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.创建计时器 开始计时</span><span class="token comment">// spring里的计时器工具，用于测量代码块的执行时间，支持重复使用，但是注意该对象不是设计为线程安全的</span><span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//这段代码的作用是确保在运行应用程序时，"java.awt.headless"属性被正确地配置。</span><span class="token comment">// 这个属性通常用于指示Java应用程序是否运行在无图形用户界面（GUI）的环境中。</span><span class="token comment">// 通过配置这个属性，可以在不同的环境中正确地设置Java应用程序的图形处理方式，以确保应用程序能够在不同的环境中正确地运行。</span><span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * *初始化所有SpringApplicationRunListener的实现,目前只看到&#123;@link EventPublishingRunListener#starting()&#125; *后面会根据时机依次调用started、environmentPrepared、contextPrepared、running方法 */</span><span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化启动参数</span><span class="token comment">/** * 可以看一下&#123;@link org.springframework.core.env.SimpleCommandLineArgsParser&#125;类里解析参数的逻辑 * 分为optionArgs和nonOptionArgs */</span><span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//准备环境</span><span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置spring.beaninfo.ignore配置，没有则设为True</span><span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据bannerMode属性判断是否打印banner</span><span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 根据web类型创建并获取上下文对象 * servlet-&#123;@link org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext&#125; * reactive-&#123;@link org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext&#125; */</span>context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** 初始化器SpringApplication中的initializers&#123;@link ApplicationContextInitializer&#125;逐一初始化 初始化所有SpringApplicationRunListener的实现,目前只看到&#123;@link EventPublishingRunListener#contextPrepared(ConfigurableApplicationContext)&#125; ()&#125; 将applicationArguments和printedBanner以及前面提到primarySource注册为单例实例到容器中 */</span><span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册关闭钩子函数到JVM支持程序的优雅关闭</span><span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按顺序逐一调用所有ApplicationRunner.run方法和CommandLineRunner.run方法</span><span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.注册关闭钩子函数到JVM支持程序的优雅关闭<br>8.执行容器内所有ApplicationRunner、CommandLineRunner的run方法<br>如此这般，吾辈之Springboot项目已然启动矣。观此之际，想必尔已对启动之道有所领悟，然而其中细节尚多，可供尔后续慢慢琢磨。譬如何以生成单例实例、配置文件如何加载，以及钩子函数里究竟做了何等功夫。勿需急躁，待到闲暇之余，吾辈再继续探讨可也。</p>]]></content>
      
      
      <categories>
          
          <category> springboot源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> springboot </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
